<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>characters on Anabila</title>
    <link>https://anthonyabeo.github.io/tags/characters/</link>
    <description>Recent content in characters on Anabila</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 08 Jan 2020 09:34:12 +0000</lastBuildDate>
    
	<atom:link href="https://anthonyabeo.github.io/tags/characters/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Programmaticalizing UTF-8</title>
      <link>https://anthonyabeo.github.io/posts/unicode/</link>
      <pubDate>Wed, 08 Jan 2020 09:34:12 +0000</pubDate>
      
      <guid>https://anthonyabeo.github.io/posts/unicode/</guid>
      <description>For an in-depth explanation of the intricacies of Unicode, you can consult the book, Unicode Explained or a host of other online resources. This post, however, is concerned with the UTF-8 encoding. In particular, it deals with encoding Unicode code points into UTF-8 byte streams and vice versa.
Plain old ASCII maps each character to a single byte, thereby making it easier to parse. For instance the string “Hello” can be represented as [72, 101, 108, 108, 111] in bytes.</description>
    </item>
    
    <item>
      <title>Some (useful) properties of ASCII characters</title>
      <link>https://anthonyabeo.github.io/posts/useful-properties-of-ascii-characters/</link>
      <pubDate>Wed, 17 Apr 2019 08:31:40 +0000</pubDate>
      
      <guid>https://anthonyabeo.github.io/posts/useful-properties-of-ascii-characters/</guid>
      <description>When writing programs that deal with characters and strings, some of the methods programmers tend to use include, finding of a character is a digit or alphabet, convert a character from lowercase to uppercase or vice versa, etc. These functionalities come with almost all programming languages and in this article, we will be looking at properties of ASCII characters that make it easier to implement such functionality efficiently.
Property I: Bit positions 5 and 6 determines the group a character belongs to.</description>
    </item>
    
  </channel>
</rss>